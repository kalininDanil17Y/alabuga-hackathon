name: Build & Deploy

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      domain:
        description: "Dev domain"
        required: true
        default: dev.nvote.ru

concurrency:
  group: deploy-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    name: Build & Push ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: api
            context: .
            file: docker/api.Dockerfile
            image_name: alabuga-api
          - service: web
            context: .
            file: Dockerfile
            image_name: alabuga-web

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # без ref: на push берётся коммит пуша, на manual — ветка, выбранная в UI

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (via GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Normalize owner/namespace
        id: norm
        run: |
          echo "NS_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "REG_LC=$(echo '${{ env.REGISTRY }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Compute TAG/STACK/DOMAIN
        id: cfg
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          if [ "$BRANCH" = "master" ]; then
            echo "TAG=latest" >> $GITHUB_OUTPUT
            echo "STACK=prod" >> $GITHUB_OUTPUT
            echo "DOMAIN=${{ vars.PROD_DOMAIN }}" >> $GITHUB_OUTPUT
          else
            echo "TAG=dev" >> $GITHUB_OUTPUT         # единый тег для dev
            echo "STACK=dev" >> $GITHUB_OUTPUT       # единый стек dev (перезаписывает прошлый)
            echo "DOMAIN=${{ inputs.domain }}" >> $GITHUB_OUTPUT
          fi
          echo "SHA=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build & Push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: true
          tags: |
            ${{ steps.norm.outputs.REG_LC }}/${{ steps.norm.outputs.NS_LC }}/${{ matrix.image_name }}:${{ steps.cfg.outputs.TAG }}
            ${{ steps.norm.outputs.REG_LC }}/${{ steps.norm.outputs.NS_LC }}/${{ matrix.image_name }}:${{ steps.cfg.outputs.SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (compose)
        uses: actions/checkout@v4

      - name: Normalize owner/namespace (again)
        id: norm
        run: |
          echo "NS_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "REG_LC=$(echo '${{ env.REGISTRY }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Compute TAG/STACK/DOMAIN (deploy)
        id: cfg
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          if [ "$BRANCH" = "master" ]; then
            echo "TAG=latest" >> $GITHUB_OUTPUT
            echo "STACK=prod" >> $GITHUB_OUTPUT
            echo "DOMAIN=${{ vars.PROD_DOMAIN }}" >> $GITHUB_OUTPUT
            echo "TARGET=${{ secrets.DEPLOY_PATH }}/prod" >> $GITHUB_OUTPUT
          else
            echo "TAG=dev" >> $GITHUB_OUTPUT
            echo "STACK=dev" >> $GITHUB_OUTPUT
            echo "DOMAIN=${{ inputs.domain }}" >> $GITHUB_OUTPUT
            echo "TARGET=${{ secrets.DEPLOY_PATH }}/dev" >> $GITHUB_OUTPUT
          fi

      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "${{ steps.cfg.outputs.TARGET }}"

      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3
        env:
          REGISTRY: ${{ steps.norm.outputs.REG_LC }}
          REGISTRY_NAMESPACE: ${{ steps.norm.outputs.NS_LC }}
          TAG: ${{ steps.cfg.outputs.TAG }}
          STACK: ${{ steps.cfg.outputs.STACK }}
          DOMAIN: ${{ steps.cfg.outputs.DOMAIN }}
          DEPLOY_DIR: ${{ steps.cfg.outputs.TARGET }}
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: REGISTRY,REGISTRY_NAMESPACE,TAG,STACK,DOMAIN,DEPLOY_DIR,REGISTRY_USER,REGISTRY_TOKEN
          script: |
            set -euo pipefail
            mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"
            cat > .env <<EOF
            REGISTRY=${REGISTRY}
            REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}
            TAG=${TAG}
            DOMAIN=${DOMAIN}
            STACK=${STACK}
            EOF
            echo "${REGISTRY_TOKEN}" | docker login "${REGISTRY}" -u "${REGISTRY_USER}" --password-stdin
            docker compose -p "${STACK}" pull
            docker compose -p "${STACK}" up -d --remove-orphans
            docker image prune -f || true
